name: 'Publish MineInAbyss packages'
description: 'Publishes to our maven repo, documentation, and release jars'
inputs:
  maven-metadata-url:
    description: 'The URL to the maven-metadata.xml file to get latest version from'
    required: false
    default: ''
  maven-snapshot-metadata-url:
    description: 'The URL to the maven-metadata.xml file for snapshots/prereleases'
    required: false
  pages-path:
    description: 'The path to publish to GitHub Pages'
    required: false
    default: ''
  run-gradle-build:
    description: 'Whether to run a default gradle build'
    required: false
    default: 'true'
  dokka:
    description: 'The type of dokka build to run'
    required: false
    default: ''
  release-files:
    description: 'The files to attach to the release'
    required: false
    default: ''
  publish-github-release:
    description: 'Whether to publish a GitHub release'
    required: false
    default: 'true'
  maven-username:
    description: 'The username of the repository to publish to'
    required: false
    default: ''
  maven-password:
    description: 'The password of the repository to publish to'
    required: false
    default: ''
  snapshot-branch:
    description: 'When the workflow runs on this branch, publish to snapshots instead of releases'
    required: false
    default: 'develop'
  pre-build:
    description: 'Shell commands to run before building with gradle'
    required: false
    default: ''
  build-tasks:
    description: 'Tasks to run for the gradle build, can have multiple space separated tasks'
    required: false
    default: 'build publish'
  changelog-prefix-file:
    description: 'A file path to prefix the changelog with'
    required: false
    default: ''
  skip-java-setup:
    description: "Don't run setup JDK and gradle tasks (useful if another action using this one needs them setup manually)"
    required: false
    default: false
runs:
  using: "composite"
  steps:
    - shell: bash
      run: echo "IS_SNAPSHOT=${{github.ref == format('refs/heads/{0}', inputs.snapshot-branch)}}" >> $GITHUB_ENV

    - name: ‚òïÔ∏è Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21
      if: ${{ inputs.skip-java-setup != 'true' }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      if: ${{ inputs.skip-java-setup != 'true' }}

    - name: Grant execute permission for gradlew
      shell: bash
      run: chmod +x gradlew

    - name: ü™∂Ô∏è Set env variable for latest maven version
      shell: bash
      run: |
        VERSION=$(curl -S -s ${{ inputs.maven-metadata-url }} 2>/dev/null | grep -oP '(?<=<latest>)(.*?)(?=<\/latest>)' || echo "0")
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      if: ${{ inputs.run-gradle-build == 'true' && inputs.maven-metadata-url != '' }}

    - name: ü™∂Ô∏è Set env variable for latest maven snapshot version if passed
      shell: bash
      run: |
        SNAPSHOT_VERSION=$(curl -S -s ${{ inputs.maven-snapshot-metadata-url }} 2>/dev/null | grep -oP '(?<=<latest>)(.*?)(?=<\/latest>)' || echo "0")
        echo "BRANCH_VERSION=$SNAPSHOT_VERSION" >> $GITHUB_ENV
      if: ${{ inputs.run-gradle-build == 'true' && inputs.maven-snapshot-metadata-url != '' }}

    - name: üêòÔ∏è Run pre-build tasks
      shell: bash
      run: ${{ inputs.pre-build }}
      if: ${{ inputs.pre-build != '' }}

    - name: üêòÔ∏è Run gradle build and publish
      shell: bash
      run: >
        ./gradlew ${{ inputs.build-tasks }}
        -PmineinabyssMavenUsername=${{ inputs.maven-username }}
        -PmineinabyssMavenPassword=${{ inputs.maven-password }}
        -Pplugin_path=${{ github.workspace }}/publish
        -Ppaperweight.experimental.sharedCaches=true
      if: ${{ inputs.run-gradle-build == 'true' }}

    - name: üìúÔ∏è Build with dokka
      shell: bash
      run: ./gradlew ${{ inputs.dokka }}
      if: ${{ inputs.run-gradle-build == 'true' && inputs.dokka  != '' && env.IS_SNAPSHOT == false }}

    - name: üêòÔ∏è Get version from gradle
      shell: bash
      id: extract_version
      run: |
        echo "BUMPED_VERSION"=$(./gradlew properties --console=plain -q | grep "^version:" | awk '{printf $2}') >> $GITHUB_ENV
      if: ${{ inputs.publish-github-release == 'true' }}

    - name: Copy cliff config to workspace for docker
      shell: bash
      run: |
        mkdir -p ${{ github.workspace }}/mineinabyss-cliff
        cp ${{ github.action_path }}/mineinabyss-cliff.toml ${{ github.workspace }}/mineinabyss-cliff/cliff.toml
      if: ${{ inputs.publish-github-release == 'true' }}

    - name: üìÉÔ∏è Generate a changelog
      uses: orhun/git-cliff-action@v3
      id: git-cliff
      with:
        config: "./mineinabyss-cliff/cliff.toml"
        args: --unreleased ${{ env.IS_SNAPSHOT == true && '' || '--ignore-tags=".*-(alpha|dev|pre|beta).*"'}} --github-repo ${{ github.repository }}
      if: ${{ inputs.publish-github-release == 'true' }}

    - name: Read changelog prefix file
      id: changelog-prefix
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{ inputs.changelog-prefix-file }}
      if: ${{ inputs.changelog-prefix-file != '' }}

    - name: üì¶Ô∏è Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ github.token }}
        target_commitish: ${{ github.sha }}
        body: ${{ steps.changelog-prefix.outputs.content || '' }}${{ steps.git-cliff.outputs.content }}
        prerelease: ${{ env.IS_SNAPSHOT }}
        tag_name: v${{ env.BUMPED_VERSION }}
        files: ${{ inputs.release-files }}
      if: ${{ inputs.publish-github-release == 'true' }}

    - name: Upload github pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: ${{ inputs.pages-path }}
      if: ${{ inputs.pages-path != '' && env.IS_SNAPSHOT == false }}
