# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = ""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""

footer = ""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Remove * prefix in GitHub's default squash commits
    { pattern = '^(\* )', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^[Ff]eat", group = "<!-- 00 -->⛰️  Features" },
    { message = "^[Ff]ix", group = "<!-- 01 -->🐛 Bug Fixes" },
    { message = "^refactor", group = "<!-- 02 -->🚜 Refactor" },
    { message = "^[Dd]oc[s]?", group = "<!-- 03 -->📚 Documentation" },
    { message = "^[Pp]erf", group = "<!-- 04 -->⚡ Performance" },
    { message = "^refactor\\(clippy\\)", skip = true },
    { message = "^style", group = "<!-- 05 -->🎨 Styling" },
    { message = "^test", group = "<!-- 06 -->🧪 Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^[Cc]hore|^ci|^[Bb]ump|^[Dd]eps", group = "<!-- 07 -->⚙️ Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 08 -->🛡️ Security" },
    { message = "^revert", group = "<!-- 09 -->◀️ Revert" },
    { message = "^\\S*:", group = "<!-- 10 -->🔍 Other" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
